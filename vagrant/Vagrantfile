IMAGE_NAME = "centos/7"
M = 3
N = 3
B = 1


# Configure Shecan Proxy
$setdns = <<-SCRIPT
echo 'root:qazwsx' | chpasswd
cat <<EOF | tee /etc/resolv.conf
nameserver 178.22.122.100 
nameserver 185.51.200.2
EOF
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

cat <<EOF>> /etc/hosts
192.168.50.9  balancer-1 balancer-node-1
192.168.50.10 master-1 master-node-1
192.168.50.11 master-2 master-node-2
192.168.50.12 master-3 master-node-3
192.168.50.13 worker-1 worker-node-1
192.168.50.14 worker-2 worker-node-2
192.168.50.15 worker-3 worker-node-3

EOF
sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
cat <<EOF>> ~/.ssh/config
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null
EOF
systemctl restart sshd
sleep 30
SCRIPT

$haproxy = <<-SCRIPT
yum install -y haproxy
SCRIPT

# Install Docker
$docker = <<-SCRIPT
# Install Docker
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 sshpass wget
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install -y docker-ce docker-ce-cli containerd.io
sudo mkdir -p /etc/systemd/system/docker.service.d
sudo systemctl enable --now docker
sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF
sudo systemctl daemon-reload 
sudo systemctl restart docker.service
SCRIPT

# Install Kubernetes dependencies
$dependencies = <<-SCRIPT

#Install CFSS for TLS
cp /vagrant/cfssl_linux-amd64 /usr/local/bin/cfssl
cp /vagrant/cfssljson_linux-amd64 /usr/local/bin/cfssljson
chmod +x /usr/local/bin/cfssl*
mkdir /opt/ssl
mkdir -p /etc/etcd/ssl
mkdir -p /var/lib/etcd

#Prepear for etcd installation
cd /vagrant/
tar -zxvf etcd-v3.3.4-linux-amd64.tar.gz
cp etcd-v3.3.4-linux-amd64/etcd* /usr/local/bin/
SCRIPT

# Configure system requirements
$configurations = <<-SCRIPT

sudo modprobe overlay
sudo modprobe br_netfilter
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system
# kubelet requires swap off
swapoff -a
# keep swap off after reboot
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
SCRIPT

$kubernetes = <<-SCRIPT
# Install kubernetes
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
sudo yum -y install epel-release vim git curl kubelet kubeadm kubectl --disableexcludes=kubernetes
mkdir /var/lib/kubelet
cat > /var/lib/kubelet/config.yaml <<EOF
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
EOF
systemctl daemon-reload
systemctl restart docker
systemctl restart kubelet
systemctl enable --now kubelet

SCRIPT



$firewallmasters = <<-SCRIPT

systemctl start firewalld
firewall-cmd --add-port={6443,2379-2380,10250,10251,10252,5473,179,5473}/tcp --permanent
firewall-cmd --add-port={4789,8285,8472}/udp --permanent
firewall-cmd --reload
SCRIPT

$firewallworkers = <<-SCRIPT

systemctl start firewalld
firewall-cmd --add-port={10250,30000-32767,5473,179,5473}/tcp --permanent
firewall-cmd --add-port={4789,8285,8472}/udp --permanent
firewall-cmd --reload
SCRIPT


Vagrant.configure("2") do |config|
  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
    v.cpus = 4
  end

  (1..B).each do |i|
    config.vm.define "balancer-#{i}" do |balancer|
		balancer.vm.box = IMAGE_NAME
		balancer.vm.network "private_network", ip: "192.168.50.#{i + 8}"
		balancer.vm.hostname = "balancer-#{i}"
		balancer.vm.provision "shell", inline: $setdns
#		balancer.vm.provision "shell", inline: $haproxy
		

    end
   end


  (1..M).each do |i|
    config.vm.define "master-#{i}" do |master|
		master.vm.box = IMAGE_NAME
		master.vm.network "private_network", ip: "192.168.50.#{i + 9}"
		master.vm.hostname = "master-#{i}"
		master.vm.provision "shell", inline: $setdns
		master.vm.provision "shell", inline: $docker
		master.vm.provision "shell", inline: $dependencies
		master.vm.provision "shell", inline: $configurations
		master.vm.provision "shell", inline: $kubernetes
#		master.vm.provision "shell", inline: $firewallmasters
    end
   end


	
  (1..N).each do |i|
    config.vm.define "worker-#{i}" do |node|
        node.vm.box = IMAGE_NAME
        node.vm.network "private_network", ip: "192.168.50.#{i + 12}"
		node.vm.disk :disk, size: "10GB", name: "extra_storage"
        node.vm.hostname = "worker-#{i}"
        node.vm.provision "shell", inline: $setdns
        node.vm.provision "shell", inline: $docker
        node.vm.provision "shell", inline: $configurations
		node.vm.provision "shell", inline: $kubernetes
#		node.vm.provision "shell", inline: $firewallworkers


    end
   end
end
